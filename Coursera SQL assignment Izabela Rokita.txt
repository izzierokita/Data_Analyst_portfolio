Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet


This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.


In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.


For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.






Part 1: Yelp Dataset Profiling and Understanding


1. Profile the data by finding the total number of records for each of the tables below:
        
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
        




2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.


i. Business = 10000 (PK id)
ii. Hours = 1562 (FK business_ID)
iii. Category = 2643 (FK business_ID)
iv. Attribute = 1115 (FK business_ID)
v. Review = 8090 (FK business_ID)
vi. Checkin = 493 (FK business_ID)
vii. Photo = 10000 (PK id)
viii. Tip = 3979 (FK business_ID)
ix. User = 10000 (PK id)
x. Friend = 11 (FK user_ID)
xi. Elite_years = 2780 (FK user_ID)


Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.        






3. Are there any columns with null values in the Users table? Indicate "yes," or "no."


        Answer: no
        
        
        SQL code used to arrive at answer:


SELECT count(*) - count(id),
   count(*) - count(name),
   count(*) - count(review_count),
   count(*) - count(yelping_since),
   count(*) - count(useful),
   count(*) - count(cool),
   count(*) - count(fans),
   count(*) - count(average_stars),
   count(*) - count(compliment_hot),
   count(*) - count(compliment_more),
   count(*) - count(compliment_profile),
   count(*) - count(compliment_cute),
   count(*) - count(compliment_list),
   count(*) - count(compliment_note),
   count(*) - count(compliment_plain),
   count(*) - count(compliment_cool),
   count(*) - count(compliment_funny),
   count(*) - count(compliment_writer),
   count(*) - count(compliment_photos)
FROM user






        
        


        
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:


        i. Table: Review, Column: Stars
        
                min: 1                max: 5                avg: 3.7082
                
        
        ii. Table: Business, Column: Stars
        
                min: 1.0        max: 5.0                avg: 3.6549
                
        
        iii. Table: Tip, Column: Likes
        
                min: 0                max: 2                avg: 0.0144
                
        
        iv. Table: Checkin, Column: Count
        
                min: 1                max: 53                avg: 1.9414
                
        
        v. Table: User, Column: Review_count
        
                min: 0                max: 2000                avg: 24.2995 
                




5. List the cities with the most reviews in descending order:


        SQL code used to arrive at answer:


SELECT sum(review_count) AS all_reviews, city
FROM business
GROUP BY city
ORDER BY all_reviews DESC;
        
        
        Copy and Paste the Result Below:
        
+-------------+-----------------+
| all_reviews | city            |
+-------------+-----------------+
|       82854 | Las Vegas       |
|       34503 | Phoenix         |
|       24113 | Toronto         |
|       20614 | Scottsdale      |
|       12523 | Charlotte       |
|       10871 | Henderson       |
|       10504 | Tempe           |
|        9798 | Pittsburgh      |
|        9448 | Montréal        |
|        8112 | Chandler        |
|        6875 | Mesa            |
|        6380 | Gilbert         |
|        5593 | Cleveland       |
|        5265 | Madison         |
|        4406 | Glendale        |
|        3814 | Mississauga     |
|        2792 | Edinburgh       |
|        2624 | Peoria          |
|        2438 | North Las Vegas |
|        2352 | Markham         |
|        2029 | Champaign       |
|        1849 | Stuttgart       |
|        1520 | Surprise        |
|        1465 | Lakewood        |
|        1155 | Goodyear        |
+-------------+-----------------+
(Output limit exceeded, 25 of 362 total rows shown)


        
6. Find the distribution of star ratings to the business in the following cities:


i. Avon


SQL code used to arrive at answer:


SELECT stars AS star_ratings, count(stars) AS count
FROM business
WHERE city='Avon'
GROUP BY stars






Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):


+--------------+-------+
| star_ratings | count |
+--------------+-------+
|          1.5 |     1 |
|          2.5 |     2 |
|          3.5 |     3 |
|          4.0 |     2 |
|          4.5 |     1 |
|          5.0 |     1 |
+--------------+-------+




ii. Beachwood


SQL code used to arrive at answer:


SELECT stars AS star_ratings, count(stars) AS count
FROM business
WHERE city='Beachwood'
GROUP BY stars






Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
                
+--------------+-------+
| star_ratings | count |
+--------------+-------+
|          2.0 |     1 |
|          2.5 |     1 |
|          3.0 |     2 |
|          3.5 |     2 |
|          4.0 |     1 |
|          4.5 |     2 |
|          5.0 |     5 |
+--------------+-------+


7. Find the top 3 users based on their total number of reviews:
                
        SQL code used to arrive at answer:


SELECT name, sum(review_count) AS total_counts
FROM user
GROUP BY id
ORDER BY total_counts DESC
LIMIT 3


        
                
        Copy and Paste the Result Below:


+--------+--------------+
| name   | total_counts |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+
                




8. Does posing more reviews correlate with more fans?


Please explain your findings and interpretation of the results:


Yes, it is, when users have more reviews, it also influences their number of fans (more reviews = more fans).


SQL code that helped to come to that conclusion:
SELECT range AS fans_range, 
       COUNT(*) AS num_user, 
       AVG(review_count) AS avg_num_review,     
       AVG(fans) AS avg_num_fans
FROM (SELECT CASE WHEN fans BETWEEN 0 AND 9 THEN '0 - 9'
                  WHEN fans BETWEEN 10 AND 99 THEN '10 - 99'
                  ELSE '100-1000' END AS range,
             review_count, 
             fans
      FROM user) AS subtable
GROUP BY subtable.range


Result:
+------------+----------+----------------+----------------+
| fans_range | num_user | avg_num_review |   avg_num_fans |
+------------+----------+----------------+----------------+
| 0 - 9      |     9690 |  15.0085655315 | 0.447265221878 |
| 10 - 99    |      294 |  283.326530612 |  25.5986394558 |
| 100-1000   |       16 |          891.5 |         189.75 |


        


        
9. Are there more reviews with the word "love" or with the word "hate" in them?


Answer: There are many more reviews with the word “love” used - so apparently, it’s not true that most of the online reviews are written by people who have a negative experience ;)


        
        SQL code used to arrive at answer:


SELECT reaction, count(*) count
FROM (
      SELECT CASE WHEN LOWER(text) LIKE '%love%' THEN 'love'
                  WHEN LOWER(text) LIKE '%hate%' THEN 'hate' 
                  ELSE NULL END AS reaction
      FROM review)
GROUP BY reaction
ORDER BY count DESC


Result:
+----------+-------+
| reaction | count |
+----------+-------+
|     None |  8042 |
|     love |  1780 |
|     hate |   178 |
+----------+-------+




        
        
10. Find the top 10 users with the most fans:


        SQL code used to arrive at answer:


SQL code used to arrive at answer:
SELECT name, fans
FROM user
ORDER BY fans DESC
LIMIT 10


        
        
        Copy and Paste the Result Below:


Copy and Paste the Result Below:
+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+


        
                


Part 2: Inferences and Analysis


1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
        
i. Do the two groups you chose to analyze have a different distribution of hours?


I’ve chosen city “Toronto” and category “Food”


SQL Code:

SELECT CASE WHEN stars >= 4.0 THEN '4-5 stars'
           WHEN stars >= 2.0 THEN '2-3 stars'
           ELSE 'below 2' END AS 'STARS',              
      COUNT(DISTINCT business.id) AS id_count,           
      COUNT(hours) AS open_days_total,   -- number of opening days       
      COUNT(hours)*1.0 / COUNT(DISTINCT business.id)  AS open_days_avg
FROM ((business INNER JOIN hours ON business.id = hours.business_id)
    INNER JOIN category ON business.id = category.business_id)
WHERE city = 'Toronto' AND category.category ='Food'
GROUP BY STARS


Results:


+-----------+----------+-----------------+---------------+
| STARS     | id_count | open_days_total | open_days_avg |
+-----------+----------+-----------------+---------------+
| 2-3 stars |        1 |               7 |           7.0 |
| 4-5 stars |        2 |              13 |           6.5 |
+-----------+----------+-----------------+---------------+


No, on average, the distribution of hours is very similar.




ii. Do the two groups you chose to analyze have a different number of reviews?
         
        SELECT CASE WHEN stars >= 4.0 THEN '4-5 stars'
           WHEN stars >= 2.0 THEN '2-3 stars'
           ELSE 'below 2' END AS 'STARS',              
      COUNT(DISTINCT business.id) AS id_count,           
      SUM(review_count) AS review_count_total,
      SUM(review_count)*1.0/COUNT(DISTINCT business.id)  AS review_count_avg
FROM business INNER JOIN category ON business.id = category.business_id
WHERE city = 'Toronto' AND category.category ='Food'
GROUP BY STARS


Results:


+-----------+----------+--------------------+------------------+
| STARS     | id_count | review_count_total | review_count_avg |
+-----------+----------+--------------------+------------------+
| 2-3 stars |        2 |                 13 |              6.5 |
| 4-5 stars |        2 |                 41 |             20.5 |
+-----------+----------+--------------------+------------------+


Answer: Yes, the businesses inside the 4-5 stars range have much more reviews than those within 2-3 stars range.


iii. Are you able to infer anything from the location data provided between these two groups? Explain.


SQL code used for analysis:


SELECT CASE WHEN stars >= 4.0 THEN '4-5 stars'
           WHEN stars >= 2.0 THEN '2-3 stars'
           ELSE 'below 2' END AS 'STARS',
      business.neighborhood,
      business.address,
      business.postal_code
FROM business INNER JOIN category ON business.id = category.business_id
WHERE city = 'Toronto' AND category.category ='Food'
ORDER BY STARS


Results:


+-----------+-----------------+----------------------+-------------+
| STARS     | neighborhood    | address              | postal_code |
+-----------+-----------------+----------------------+-------------+
| 2-3 stars | Roncesvalles    | 2280 Dundas Street W | M6R 1X3     |
| 2-3 stars |                 | 3003 Bathurst Street | M6B         |
| 4-5 stars | High Park       | 1669 Bloor Street W  | M6P 1A6     |
| 4-5 stars | Wallace Emerson | 247 Wallace Avenue   | M6H 1V5     |
+-----------+-----------------+----------------------+-------------+


Answer: One of the businesses within 2-3 stars range, placed on 3003 Bathurst Street has got no neighborhood around (or it’s not mentioned). It’s worth to investigate further, is this simply lack of data provided, or worse location (no clients nearby) influence its worse ratings.


                
                
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
                
i. Difference 1: 
Closed businesses have far less reviews than the open ones, and have slightly worse average reviews rating.


         
ii. Difference 2:


Number of businesses. There are more open businesses than the closed ones.
         
         
SQL code used for analysis:


SELECT is_open,
      count(distinct business.id) num_business,
      count(distinct review.id) num_review,
      avg(review.stars) avg_stars
FROM business
JOIN review ON business.id =  review.business_id
GROUP BY is_open


Results:


+---------+--------------+------------+---------------+
| is_open | num_business | num_review |     avg_stars |
+---------+--------------+------------+---------------+
|       0 |           61 |         71 | 3.64788732394 |
|       1 |          446 |        565 |  3.7610619469 |
+---------+--------------+------------+---------------+


        
        
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.


Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
        
i. Indicate the type of analysis you chose to do:


What is the business category with the least success potential?
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:


Among the categories, I calculate the average of stars (clients satisfaction) and the proportion of openings in each category (how many of them are closed). For accurate results, I’ve chosen only categories with more than 10 businesses.                           
                  
iii. Output of your finished dataset:


+------------------------+--------------+-----------+------------+
| category               | num_business | avg_stars | avg_isopen |
+------------------------+--------------+-----------+------------+
| Nightlife              |           20 |      3.48 |        0.6 |
| Bars                   |           17 |       3.5 |       0.65 |
| American (Traditional) |           11 |      3.82 |       0.73 |
| Restaurants            |           71 |      3.46 |       0.75 |
| Shopping               |           30 |      3.98 |       0.83 |
| Local Services         |           12 |      4.21 |       0.83 |
| Food                   |           23 |      3.78 |       0.87 |
| Beauty & Spas          |           13 |      3.88 |       0.92 |
| Home Services          |           16 |       4.0 |       0.94 |
| Health & Medical       |           17 |      4.09 |       0.94 |
+------------------------+--------------+-----------+------------+


Conclusion:


As a result we can see that Nightlife is the most risky and least successful business category based on the provided data. Only 0.6 of all the Nightlife businesses opened are still operating, and the average stars for this category is almost the lowest one (only Restaurants have slightly lower ratings, but only by 0.02). Next in line are Bars (with 0.65 avg open rate) and American (Traditional), with 0.73 avg open rate.
         
         
iv. Provide the SQL code you used to create your final dataset:


SELECT category.category,
      count(business.id) num_business,
      round(avg(business.stars),2) avg_stars,
      round(avg(business.is_open),2) avg_isopen
FROM (business INNER JOIN category ON business.id = category.business_id)
GROUP BY category.category
HAVING num_business > 10
ORDER BY avg_isopen ASC, avg_stars ASC